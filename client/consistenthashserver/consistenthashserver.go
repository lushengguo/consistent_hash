// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: consistent_hash.proto

package consistenthashserver

import (
	"context"

	"consistent_hash/consistent_hash/proto"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteKeyRequest                = proto_consistent_hash.DeleteKeyRequest
	DeleteKeyResponse               = proto_consistent_hash.DeleteKeyResponse
	Empty                           = proto_consistent_hash.Empty
	GetValueRequest                 = proto_consistent_hash.GetValueRequest
	GetValueResponse                = proto_consistent_hash.GetValueResponse
	Gossip                          = proto_consistent_hash.Gossip
	RedirectCloneKeyMessageRequest  = proto_consistent_hash.RedirectCloneKeyMessageRequest
	RedirectCloneKeyMessageResponse = proto_consistent_hash.RedirectCloneKeyMessageResponse
	RedirectGossipMessageRequest    = proto_consistent_hash.RedirectGossipMessageRequest
	RedirectGossipMessageResponse   = proto_consistent_hash.RedirectGossipMessageResponse
	ServiceRecord                   = proto_consistent_hash.ServiceRecord
	SetKVRequest                    = proto_consistent_hash.SetKVRequest
	SetKVResponse                   = proto_consistent_hash.SetKVResponse

	ConsistentHashServer interface {
		GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
		SetKV(ctx context.Context, in *SetKVRequest, opts ...grpc.CallOption) (*SetKVResponse, error)
		DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
		ListenGossip(ctx context.Context, in *Gossip, opts ...grpc.CallOption) (*Gossip, error)
	}

	defaultConsistentHashServer struct {
		cli zrpc.Client
	}
)

func NewConsistentHashServer(cli zrpc.Client) ConsistentHashServer {
	return &defaultConsistentHashServer{
		cli: cli,
	}
}

func (m *defaultConsistentHashServer) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	client := proto_consistent_hash.NewConsistentHashServerClient(m.cli.Conn())
	return client.GetValue(ctx, in, opts...)
}

func (m *defaultConsistentHashServer) SetKV(ctx context.Context, in *SetKVRequest, opts ...grpc.CallOption) (*SetKVResponse, error) {
	client := proto_consistent_hash.NewConsistentHashServerClient(m.cli.Conn())
	return client.SetKV(ctx, in, opts...)
}

func (m *defaultConsistentHashServer) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	client := proto_consistent_hash.NewConsistentHashServerClient(m.cli.Conn())
	return client.DeleteKey(ctx, in, opts...)
}

func (m *defaultConsistentHashServer) ListenGossip(ctx context.Context, in *Gossip, opts ...grpc.CallOption) (*Gossip, error) {
	client := proto_consistent_hash.NewConsistentHashServerClient(m.cli.Conn())
	return client.ListenGossip(ctx, in, opts...)
}
